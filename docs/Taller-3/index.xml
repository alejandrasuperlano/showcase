<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual computing</title><link>https://mbolanoss.github.io/showcase/docs/Taller-3/</link><description>Recent content on Visual computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://mbolanoss.github.io/showcase/docs/Taller-3/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://mbolanoss.github.io/showcase/docs/Taller-3/1-Color-Blending/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mbolanoss.github.io/showcase/docs/Taller-3/1-Color-Blending/</guid><description>Color Blending üî¥üü†üü° # Exercises Averiguar el c√≥digo js de los sketches de ejemplo. Implementar otros modos de blending. Tomar esta referencia como un punto de partida. Marco te√≥rico # Color Mixing # Existen 3 tipos de mezcla de colores: aditivo, sustractivo y promedio.
Aditivo Por convenci√≥n, los 3 colores primarios son el rojo, el verde y el azul. La ausencia de luz de cualquier color corresponde con negro. Si se mezclan los 3 colores en mismas propociones, el resultado es neutral (blanco o gris).</description></item><item><title/><link>https://mbolanoss.github.io/showcase/docs/Taller-3/2-Texturing-UV-Visualization-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mbolanoss.github.io/showcase/docs/Taller-3/2-Texturing-UV-Visualization-1/</guid><description>UV Visualization - Exercise 1 üî¥üü¢üîµ # Exercise Redefinir las coordenas de textura de la figura, para invertir la imagen de abajo.
Soluci√≥n #1 # JavaScript: Ajustando coordenadas u &amp;amp; v en vertex # Construcci√≥n de la figura invirtiendo las coordenadas de la textura en el llamado a vertex.
La funci√≥n vertex tiene la siguiente estructura:
vertex(x, y, [z], [u], [v]) Siendo los parametros los siguientes:
x - x-coordinate of the vertex y - y-coordinate of the vertex z - z-coordinate of the vertex u - the vertex&amp;rsquo;s texture u-coordinate v - the vertex&amp;rsquo;s texture v-coordinate Source Code: JavaScript // Construcci√≥n de la figura invirtiendo las coordenadas de la textura // en el llamado a vertex let uvShader; function preload() { // No se pasa ninguna matriz al shader uvShader = readShader(&amp;#39;/showcase/sketches/uv_1/uv.</description></item><item><title/><link>https://mbolanoss.github.io/showcase/docs/Taller-3/3-Texturing-UV-Visualization-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mbolanoss.github.io/showcase/docs/Taller-3/3-Texturing-UV-Visualization-2/</guid><description>UV Visualization - Exercise 2 üü•üü©üü¶ # Exercises Incluir el canal azul dentro de la visualizaci√≥n uv. Utilizar otras figuras, diferentes a quad, como filtros. Soluci√≥n y Resultados # Utilice el primer selector para cambiar los canales visualizados. Utilice el segundo selector para cambiar la forma del filtro. Conclusiones # Es posible implementar filtros pasando un parametro de opacidad como uniforme al fragment shader. Referencias # Visual Computing. (2022, 15 noviembre).</description></item><item><title/><link>https://mbolanoss.github.io/showcase/docs/Taller-3/4-Color-Brightness-and-Tinting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mbolanoss.github.io/showcase/docs/Taller-3/4-Color-Brightness-and-Tinting/</guid><description>Color Brightness üåü and Tinting üë©‚Äçüé® # Exercises Implementar otras modos de luminosidad, como HSV, HSL y promedio. Implementar tintado de texturas para mezclar colores y texels. Marco te√≥rico # Herramientas de luminosidad # La luminosidad es la percepci√≥n visual de la luminancia de un objeto. En colorimetr√≠a, es una predicci√≥n de que tan iluminado aparecer√° un color para un determinado observador. ¬øQu√© es la luminancia? Es la m√©dida de intensidad lum√≠nica por unidad de √°rea de la luz viajando en una determinada direcci√≥n.</description></item><item><title/><link>https://mbolanoss.github.io/showcase/docs/Taller-3/5-Image-Processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mbolanoss.github.io/showcase/docs/Taller-3/5-Image-Processing/</guid><description>Image/Video processing üñºÔ∏è # Workshop Implement an image / video processing app supporting different masks, including other kernel sizes different than 3x3, and:
A region-of-interest base tool to selectively apply a given mask.Hint: circular regions around the mouse pointer are handy and quite simple to implement by means of glsl distance. A magnifier tool. Requires a bit of research. For instance, look for it in shadertoy. Integrate luma and other coloring brightness tools.</description></item><item><title/><link>https://mbolanoss.github.io/showcase/docs/Taller-3/6-Lighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mbolanoss.github.io/showcase/docs/Taller-3/6-Lighting/</guid><description>Lighting üî¶ # Workshop Implement a scene having the following lighting equation:
\[a = ambient\cdot ambient4\] where ambient4 is the ambient light color.
Marco te√≥rico # La iluminaci√≥n local est√° dada por la siguiente ecuaci√≥n: En este caso los terminos d y s de la ecuaci√≥n no nos interesan ya que solo vamos a modificar la luz ambiental.
De modo que la ecuaci√≥n a usar es la siguiente:
\[\lambda = a\cdot \rho\] Soluci√≥n y resultados # Fragment shader precision mediump float; uniform vec4 uMaterialColor; uniform vec4 lightColor; uniform float ambient; void main() { vec4 ambient4 = lightColor * ambient; gl_FragColor = ambient4 * uMaterialColor; } Conclusiones # Vemos como el color de la luz ambiental produce un efecto de tinting sobre las figuras renderizadas.</description></item></channel></rss>